/*
 * generated by Xtext 2.32.0
 */
/*
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.query.ide.contentassist.antlr;

import com.epistimis.uddl.query.ide.contentassist.antlr.internal.InternalQueryParser;
import com.epistimis.uddl.query.services.QueryGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class QueryParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(QueryGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, QueryGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSetQualifierAccess().getAlternatives(), "rule__SetQualifier__Alternatives");
			builder.put(grammarAccess.getProjectedCharacteristicListAccess().getAlternatives(), "rule__ProjectedCharacteristicList__Alternatives");
			builder.put(grammarAccess.getProjectedCharacteristicExpressionAccess().getAlternatives(), "rule__ProjectedCharacteristicExpression__Alternatives");
			builder.put(grammarAccess.getProjectedCharacteristicReferenceAccess().getAlternatives(), "rule__ProjectedCharacteristicReference__Alternatives");
			builder.put(grammarAccess.getOrderingTypeAccess().getAlternatives(), "rule__OrderingType__Alternatives");
			builder.put(grammarAccess.getBooleanPredicateAccess().getAlternatives(), "rule__BooleanPredicate__Alternatives");
			builder.put(grammarAccess.getLogicalSetAccess().getAlternatives(), "rule__LogicalSet__Alternatives");
			builder.put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
			builder.put(grammarAccess.getSetCompareQuantifierAccess().getAlternatives(), "rule__SetCompareQuantifier__Alternatives");
			builder.put(grammarAccess.getPredicateTermAccess().getAlternatives(), "rule__PredicateTerm__Alternatives");
			builder.put(grammarAccess.getCharacteristicBasisAccess().getAlternatives(), "rule__CharacteristicBasis__Alternatives");
			builder.put(grammarAccess.getQueryStatementAccess().getGroup(), "rule__QueryStatement__Group__0");
			builder.put(grammarAccess.getProjectedCharacteristicListAccess().getGroup_1(), "rule__ProjectedCharacteristicList__Group_1__0");
			builder.put(grammarAccess.getProjectedCharacteristicListAccess().getGroup_1_1(), "rule__ProjectedCharacteristicList__Group_1_1__0");
			builder.put(grammarAccess.getSelectedEntityCharacteristicWildcardReferenceAccess().getGroup(), "rule__SelectedEntityCharacteristicWildcardReference__Group__0");
			builder.put(grammarAccess.getExplicitSelectedEntityCharacteristicReferenceAccess().getGroup(), "rule__ExplicitSelectedEntityCharacteristicReference__Group__0");
			builder.put(grammarAccess.getExplicitSelectedEntityCharacteristicReferenceAccess().getGroup_1(), "rule__ExplicitSelectedEntityCharacteristicReference__Group_1__0");
			builder.put(grammarAccess.getSelectedEntityExpressionAccess().getGroup(), "rule__SelectedEntityExpression__Group__0");
			builder.put(grammarAccess.getFromClauseAccess().getGroup(), "rule__FromClause__Group__0");
			builder.put(grammarAccess.getEntityExpressionAccess().getGroup(), "rule__EntityExpression__Group__0");
			builder.put(grammarAccess.getSelectedEntityAccess().getGroup(), "rule__SelectedEntity__Group__0");
			builder.put(grammarAccess.getSelectedEntityAccess().getGroup_1(), "rule__SelectedEntity__Group_1__0");
			builder.put(grammarAccess.getEntityJoinExpressionAccess().getGroup(), "rule__EntityJoinExpression__Group__0");
			builder.put(grammarAccess.getEntityJoinCriteriaAccess().getGroup(), "rule__EntityJoinCriteria__Group__0");
			builder.put(grammarAccess.getEntityJoinCriteriaAccess().getGroup_1(), "rule__EntityJoinCriteria__Group_1__0");
			builder.put(grammarAccess.getEntityTypeCharacteristicEquivalenceExpressionAccess().getGroup(), "rule__EntityTypeCharacteristicEquivalenceExpression__Group__0");
			builder.put(grammarAccess.getEntityTypeCharacteristicEquivalenceExpressionAccess().getGroup_1(), "rule__EntityTypeCharacteristicEquivalenceExpression__Group_1__0");
			builder.put(grammarAccess.getSelectedEntityCharacteristicReferenceAccess().getGroup(), "rule__SelectedEntityCharacteristicReference__Group__0");
			builder.put(grammarAccess.getSelectedEntityCharacteristicReferenceAccess().getGroup_0(), "rule__SelectedEntityCharacteristicReference__Group_0__0");
			builder.put(grammarAccess.getWhereClauseAccess().getGroup(), "rule__WhereClause__Group__0");
			builder.put(grammarAccess.getOrderByClauseAccess().getGroup(), "rule__OrderByClause__Group__0");
			builder.put(grammarAccess.getOrderByClauseAccess().getGroup_3(), "rule__OrderByClause__Group_3__0");
			builder.put(grammarAccess.getOrderingExpressionAccess().getGroup(), "rule__OrderingExpression__Group__0");
			builder.put(grammarAccess.getQualifiedProjectedCharacteristicReferenceAccess().getGroup(), "rule__QualifiedProjectedCharacteristicReference__Group__0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getGroup_1(), "rule__BooleanExpression__Group_1__0");
			builder.put(grammarAccess.getBooleanTermAccess().getGroup(), "rule__BooleanTerm__Group__0");
			builder.put(grammarAccess.getBooleanTermAccess().getGroup_1(), "rule__BooleanTerm__Group_1__0");
			builder.put(grammarAccess.getBooleanFactorAccess().getGroup(), "rule__BooleanFactor__Group__0");
			builder.put(grammarAccess.getBooleanPredicateAccess().getGroup_2(), "rule__BooleanPredicate__Group_2__0");
			builder.put(grammarAccess.getScalarComparePredicateAccess().getGroup(), "rule__ScalarComparePredicate__Group__0");
			builder.put(grammarAccess.getSetMembershipPredicateAccess().getGroup(), "rule__SetMembershipPredicate__Group__0");
			builder.put(grammarAccess.getCharacteristicBasisSetAccess().getGroup(), "rule__CharacteristicBasisSet__Group__0");
			builder.put(grammarAccess.getCharacteristicBasisSetAccess().getGroup_2(), "rule__CharacteristicBasisSet__Group_2__0");
			builder.put(grammarAccess.getSetComparePredicateAccess().getGroup(), "rule__SetComparePredicate__Group__0");
			builder.put(grammarAccess.getExistsPredicateAccess().getGroup(), "rule__ExistsPredicate__Group__0");
			builder.put(grammarAccess.getSubqueryAccess().getGroup(), "rule__Subquery__Group__0");
			builder.put(grammarAccess.getEnumLiteralSetAccess().getGroup(), "rule__EnumLiteralSet__Group__0");
			builder.put(grammarAccess.getEnumLiteralSetAccess().getGroup_4(), "rule__EnumLiteralSet__Group_4__0");
			builder.put(grammarAccess.getEnumLiteralReferenceExpressionAccess().getGroup(), "rule__EnumLiteralReferenceExpression__Group__0");
			builder.put(grammarAccess.getQueryStatementAccess().getQualifierAssignment_1(), "rule__QueryStatement__QualifierAssignment_1");
			builder.put(grammarAccess.getQueryStatementAccess().getProjectedCharacteristicListAssignment_2(), "rule__QueryStatement__ProjectedCharacteristicListAssignment_2");
			builder.put(grammarAccess.getQueryStatementAccess().getSelectedEntityExpressionAssignment_3(), "rule__QueryStatement__SelectedEntityExpressionAssignment_3");
			builder.put(grammarAccess.getProjectedCharacteristicListAccess().getAllAssignment_0(), "rule__ProjectedCharacteristicList__AllAssignment_0");
			builder.put(grammarAccess.getProjectedCharacteristicListAccess().getCharacteristicAssignment_1_0(), "rule__ProjectedCharacteristicList__CharacteristicAssignment_1_0");
			builder.put(grammarAccess.getProjectedCharacteristicListAccess().getCharacteristicAssignment_1_1_1(), "rule__ProjectedCharacteristicList__CharacteristicAssignment_1_1_1");
			builder.put(grammarAccess.getSelectedEntityCharacteristicWildcardReferenceAccess().getSelectedEntityAssignment_0(), "rule__SelectedEntityCharacteristicWildcardReference__SelectedEntityAssignment_0");
			builder.put(grammarAccess.getExplicitSelectedEntityCharacteristicReferenceAccess().getSelectedEntityCharacteristicReferenceAssignment_0(), "rule__ExplicitSelectedEntityCharacteristicReference__SelectedEntityCharacteristicReferenceAssignment_0");
			builder.put(grammarAccess.getExplicitSelectedEntityCharacteristicReferenceAccess().getProjectedCharacteristicAliasAssignment_1_1(), "rule__ExplicitSelectedEntityCharacteristicReference__ProjectedCharacteristicAliasAssignment_1_1");
			builder.put(grammarAccess.getSelectedEntityExpressionAccess().getFromAssignment_0(), "rule__SelectedEntityExpression__FromAssignment_0");
			builder.put(grammarAccess.getSelectedEntityExpressionAccess().getWhereAssignment_1(), "rule__SelectedEntityExpression__WhereAssignment_1");
			builder.put(grammarAccess.getSelectedEntityExpressionAccess().getOrderByAssignment_2(), "rule__SelectedEntityExpression__OrderByAssignment_2");
			builder.put(grammarAccess.getFromClauseAccess().getEntityAssignment_1(), "rule__FromClause__EntityAssignment_1");
			builder.put(grammarAccess.getEntityExpressionAccess().getSelectedEntityAssignment_0(), "rule__EntityExpression__SelectedEntityAssignment_0");
			builder.put(grammarAccess.getEntityExpressionAccess().getEjeAssignment_1(), "rule__EntityExpression__EjeAssignment_1");
			builder.put(grammarAccess.getSelectedEntityAccess().getEntityTypeAssignment_0(), "rule__SelectedEntity__EntityTypeAssignment_0");
			builder.put(grammarAccess.getSelectedEntityAccess().getSelectedEntityAliasAssignment_1_1(), "rule__SelectedEntity__SelectedEntityAliasAssignment_1_1");
			builder.put(grammarAccess.getEntityJoinExpressionAccess().getJoinEntityAssignment_1(), "rule__EntityJoinExpression__JoinEntityAssignment_1");
			builder.put(grammarAccess.getEntityJoinExpressionAccess().getEntityJoinCriteriaAssignment_3(), "rule__EntityJoinExpression__EntityJoinCriteriaAssignment_3");
			builder.put(grammarAccess.getEntityJoinCriteriaAccess().getEtceeAssignment_0(), "rule__EntityJoinCriteria__EtceeAssignment_0");
			builder.put(grammarAccess.getEntityJoinCriteriaAccess().getEtceeAssignment_1_1(), "rule__EntityJoinCriteria__EtceeAssignment_1_1");
			builder.put(grammarAccess.getEntityTypeCharacteristicEquivalenceExpressionAccess().getSecrAssignment_0(), "rule__EntityTypeCharacteristicEquivalenceExpression__SecrAssignment_0");
			builder.put(grammarAccess.getEntityTypeCharacteristicEquivalenceExpressionAccess().getSelectedEntityAssignment_1_1(), "rule__EntityTypeCharacteristicEquivalenceExpression__SelectedEntityAssignment_1_1");
			builder.put(grammarAccess.getSelectedEntityCharacteristicReferenceAccess().getSelectedEntityAssignment_0_0(), "rule__SelectedEntityCharacteristicReference__SelectedEntityAssignment_0_0");
			builder.put(grammarAccess.getSelectedEntityCharacteristicReferenceAccess().getCharacteristicAssignment_1(), "rule__SelectedEntityCharacteristicReference__CharacteristicAssignment_1");
			builder.put(grammarAccess.getWhereClauseAccess().getCriteriaAssignment_1(), "rule__WhereClause__CriteriaAssignment_1");
			builder.put(grammarAccess.getOrderByClauseAccess().getOrderingExpressionAssignment_2(), "rule__OrderByClause__OrderingExpressionAssignment_2");
			builder.put(grammarAccess.getOrderByClauseAccess().getOrderingExpressionAssignment_3_1(), "rule__OrderByClause__OrderingExpressionAssignment_3_1");
			builder.put(grammarAccess.getOrderingExpressionAccess().getCharacteristicAssignment_0(), "rule__OrderingExpression__CharacteristicAssignment_0");
			builder.put(grammarAccess.getOrderingExpressionAccess().getOrderingTypeAssignment_1(), "rule__OrderingExpression__OrderingTypeAssignment_1");
			builder.put(grammarAccess.getQualifiedProjectedCharacteristicReferenceAccess().getSelectedEntityReferenceAssignment_0(), "rule__QualifiedProjectedCharacteristicReference__SelectedEntityReferenceAssignment_0");
			builder.put(grammarAccess.getQualifiedProjectedCharacteristicReferenceAccess().getCharacteristicAssignment_2(), "rule__QualifiedProjectedCharacteristicReference__CharacteristicAssignment_2");
			builder.put(grammarAccess.getBooleanExpressionAccess().getTermAssignment_0(), "rule__BooleanExpression__TermAssignment_0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getTermAssignment_1_1(), "rule__BooleanExpression__TermAssignment_1_1");
			builder.put(grammarAccess.getBooleanTermAccess().getFactorAssignment_0(), "rule__BooleanTerm__FactorAssignment_0");
			builder.put(grammarAccess.getBooleanTermAccess().getFactorAssignment_1_1(), "rule__BooleanTerm__FactorAssignment_1_1");
			builder.put(grammarAccess.getBooleanFactorAccess().getNotAssignment_0(), "rule__BooleanFactor__NotAssignment_0");
			builder.put(grammarAccess.getBooleanFactorAccess().getPredAssignment_1(), "rule__BooleanFactor__PredAssignment_1");
			builder.put(grammarAccess.getScalarComparePredicateAccess().getLeftAssignment_0(), "rule__ScalarComparePredicate__LeftAssignment_0");
			builder.put(grammarAccess.getScalarComparePredicateAccess().getOpAssignment_1(), "rule__ScalarComparePredicate__OpAssignment_1");
			builder.put(grammarAccess.getScalarComparePredicateAccess().getRightAssignment_2(), "rule__ScalarComparePredicate__RightAssignment_2");
			builder.put(grammarAccess.getSetMembershipPredicateAccess().getLeftAssignment_0(), "rule__SetMembershipPredicate__LeftAssignment_0");
			builder.put(grammarAccess.getSetMembershipPredicateAccess().getNotAssignment_1(), "rule__SetMembershipPredicate__NotAssignment_1");
			builder.put(grammarAccess.getSetMembershipPredicateAccess().getSetAssignment_3(), "rule__SetMembershipPredicate__SetAssignment_3");
			builder.put(grammarAccess.getCharacteristicBasisSetAccess().getCharacteristicBasisAssignment_1(), "rule__CharacteristicBasisSet__CharacteristicBasisAssignment_1");
			builder.put(grammarAccess.getCharacteristicBasisSetAccess().getCharacteristicBasisAssignment_2_1(), "rule__CharacteristicBasisSet__CharacteristicBasisAssignment_2_1");
			builder.put(grammarAccess.getSetComparePredicateAccess().getPredAssignment_0(), "rule__SetComparePredicate__PredAssignment_0");
			builder.put(grammarAccess.getSetComparePredicateAccess().getOpAssignment_1(), "rule__SetComparePredicate__OpAssignment_1");
			builder.put(grammarAccess.getSetComparePredicateAccess().getQuantifierAssignment_2(), "rule__SetComparePredicate__QuantifierAssignment_2");
			builder.put(grammarAccess.getSetComparePredicateAccess().getSetAssignment_3(), "rule__SetComparePredicate__SetAssignment_3");
			builder.put(grammarAccess.getExistsPredicateAccess().getSubAssignment_1(), "rule__ExistsPredicate__SubAssignment_1");
			builder.put(grammarAccess.getSubqueryAccess().getQueryAssignment_1(), "rule__Subquery__QueryAssignment_1");
			builder.put(grammarAccess.getEnumLiteralSetAccess().getTypeAssignment_1(), "rule__EnumLiteralSet__TypeAssignment_1");
			builder.put(grammarAccess.getEnumLiteralSetAccess().getLiteralAssignment_3(), "rule__EnumLiteralSet__LiteralAssignment_3");
			builder.put(grammarAccess.getEnumLiteralSetAccess().getLiteralAssignment_4_1(), "rule__EnumLiteralSet__LiteralAssignment_4_1");
			builder.put(grammarAccess.getEnumLiteralReferenceExpressionAccess().getTypAssignment_1(), "rule__EnumLiteralReferenceExpression__TypAssignment_1");
			builder.put(grammarAccess.getEnumLiteralReferenceExpressionAccess().getLiteralAssignment_3(), "rule__EnumLiteralReferenceExpression__LiteralAssignment_3");
			builder.put(grammarAccess.getQueryIdentifierAccess().getIdAssignment(), "rule__QueryIdentifier__IdAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private QueryGrammarAccess grammarAccess;

	@Override
	protected InternalQueryParser createParser() {
		InternalQueryParser result = new InternalQueryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QueryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
