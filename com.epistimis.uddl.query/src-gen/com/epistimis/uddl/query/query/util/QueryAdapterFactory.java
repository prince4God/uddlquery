/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.query.query.util;

import com.epistimis.uddl.query.query.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.epistimis.uddl.query.query.QueryPackage
 * @generated
 */
public class QueryAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QueryPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = QueryPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QuerySwitch<Adapter> modelSwitch =
    new QuerySwitch<Adapter>()
    {
      @Override
      public Adapter caseQuerySpecification(QuerySpecification object)
      {
        return createQuerySpecificationAdapter();
      }
      @Override
      public Adapter caseQueryStatement(QueryStatement object)
      {
        return createQueryStatementAdapter();
      }
      @Override
      public Adapter caseProjectedCharacteristicList(ProjectedCharacteristicList object)
      {
        return createProjectedCharacteristicListAdapter();
      }
      @Override
      public Adapter caseProjectedCharacteristicExpression(ProjectedCharacteristicExpression object)
      {
        return createProjectedCharacteristicExpressionAdapter();
      }
      @Override
      public Adapter caseSelectedEntityCharacteristicWildcardReference(SelectedEntityCharacteristicWildcardReference object)
      {
        return createSelectedEntityCharacteristicWildcardReferenceAdapter();
      }
      @Override
      public Adapter caseExplicitSelectedEntityCharacteristicReference(ExplicitSelectedEntityCharacteristicReference object)
      {
        return createExplicitSelectedEntityCharacteristicReferenceAdapter();
      }
      @Override
      public Adapter caseSelectedEntityExpression(SelectedEntityExpression object)
      {
        return createSelectedEntityExpressionAdapter();
      }
      @Override
      public Adapter caseFromClause(FromClause object)
      {
        return createFromClauseAdapter();
      }
      @Override
      public Adapter caseEntityExpression(EntityExpression object)
      {
        return createEntityExpressionAdapter();
      }
      @Override
      public Adapter caseSelectedEntity(SelectedEntity object)
      {
        return createSelectedEntityAdapter();
      }
      @Override
      public Adapter caseEntityJoinExpression(EntityJoinExpression object)
      {
        return createEntityJoinExpressionAdapter();
      }
      @Override
      public Adapter caseJoinEntity(JoinEntity object)
      {
        return createJoinEntityAdapter();
      }
      @Override
      public Adapter caseEntityJoinCriteria(EntityJoinCriteria object)
      {
        return createEntityJoinCriteriaAdapter();
      }
      @Override
      public Adapter caseEntityTypeCharacteristicEquivalenceExpression(EntityTypeCharacteristicEquivalenceExpression object)
      {
        return createEntityTypeCharacteristicEquivalenceExpressionAdapter();
      }
      @Override
      public Adapter caseSelectedEntityCharacteristicReference(SelectedEntityCharacteristicReference object)
      {
        return createSelectedEntityCharacteristicReferenceAdapter();
      }
      @Override
      public Adapter caseSelectedEntityReference(SelectedEntityReference object)
      {
        return createSelectedEntityReferenceAdapter();
      }
      @Override
      public Adapter caseWhereClause(WhereClause object)
      {
        return createWhereClauseAdapter();
      }
      @Override
      public Adapter caseCriteria(Criteria object)
      {
        return createCriteriaAdapter();
      }
      @Override
      public Adapter caseOrderByClause(OrderByClause object)
      {
        return createOrderByClauseAdapter();
      }
      @Override
      public Adapter caseOrderingExpression(OrderingExpression object)
      {
        return createOrderingExpressionAdapter();
      }
      @Override
      public Adapter caseProjectedCharacteristicReference(ProjectedCharacteristicReference object)
      {
        return createProjectedCharacteristicReferenceAdapter();
      }
      @Override
      public Adapter caseQualifiedProjectedCharacteristicReference(QualifiedProjectedCharacteristicReference object)
      {
        return createQualifiedProjectedCharacteristicReferenceAdapter();
      }
      @Override
      public Adapter caseUnqualifiedProjectedCharacteristicReferenceOrAlias(UnqualifiedProjectedCharacteristicReferenceOrAlias object)
      {
        return createUnqualifiedProjectedCharacteristicReferenceOrAliasAdapter();
      }
      @Override
      public Adapter caseBooleanExpression(BooleanExpression object)
      {
        return createBooleanExpressionAdapter();
      }
      @Override
      public Adapter caseBooleanTerm(BooleanTerm object)
      {
        return createBooleanTermAdapter();
      }
      @Override
      public Adapter caseBooleanFactor(BooleanFactor object)
      {
        return createBooleanFactorAdapter();
      }
      @Override
      public Adapter caseBooleanPredicate(BooleanPredicate object)
      {
        return createBooleanPredicateAdapter();
      }
      @Override
      public Adapter caseScalarComparePredicate(ScalarComparePredicate object)
      {
        return createScalarComparePredicateAdapter();
      }
      @Override
      public Adapter caseSetMembershipPredicate(SetMembershipPredicate object)
      {
        return createSetMembershipPredicateAdapter();
      }
      @Override
      public Adapter caseLogicalSet(LogicalSet object)
      {
        return createLogicalSetAdapter();
      }
      @Override
      public Adapter caseCharacteristicBasisSet(CharacteristicBasisSet object)
      {
        return createCharacteristicBasisSetAdapter();
      }
      @Override
      public Adapter caseSetComparePredicate(SetComparePredicate object)
      {
        return createSetComparePredicateAdapter();
      }
      @Override
      public Adapter caseCompareSet(CompareSet object)
      {
        return createCompareSetAdapter();
      }
      @Override
      public Adapter caseExistsPredicate(ExistsPredicate object)
      {
        return createExistsPredicateAdapter();
      }
      @Override
      public Adapter casePredicateTerm(PredicateTerm object)
      {
        return createPredicateTermAdapter();
      }
      @Override
      public Adapter caseCharacteristicBasis(CharacteristicBasis object)
      {
        return createCharacteristicBasisAdapter();
      }
      @Override
      public Adapter caseSubquery(Subquery object)
      {
        return createSubqueryAdapter();
      }
      @Override
      public Adapter caseCharacteristicReference(CharacteristicReference object)
      {
        return createCharacteristicReferenceAdapter();
      }
      @Override
      public Adapter caseEntityTypeReference(EntityTypeReference object)
      {
        return createEntityTypeReferenceAdapter();
      }
      @Override
      public Adapter caseEnumLiteralSet(EnumLiteralSet object)
      {
        return createEnumLiteralSetAdapter();
      }
      @Override
      public Adapter caseEnumLiteralReferenceExpression(EnumLiteralReferenceExpression object)
      {
        return createEnumLiteralReferenceExpressionAdapter();
      }
      @Override
      public Adapter caseEnumerationTypeReference(EnumerationTypeReference object)
      {
        return createEnumerationTypeReferenceAdapter();
      }
      @Override
      public Adapter caseEnumerationLiteralReference(EnumerationLiteralReference object)
      {
        return createEnumerationLiteralReferenceAdapter();
      }
      @Override
      public Adapter caseSelectedEntityAlias(SelectedEntityAlias object)
      {
        return createSelectedEntityAliasAdapter();
      }
      @Override
      public Adapter caseProjectedCharacteristicAlias(ProjectedCharacteristicAlias object)
      {
        return createProjectedCharacteristicAliasAdapter();
      }
      @Override
      public Adapter caseQueryIdentifier(QueryIdentifier object)
      {
        return createQueryIdentifierAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.QuerySpecification <em>Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.QuerySpecification
   * @generated
   */
  public Adapter createQuerySpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.QueryStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.QueryStatement
   * @generated
   */
  public Adapter createQueryStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.ProjectedCharacteristicList <em>Projected Characteristic List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.ProjectedCharacteristicList
   * @generated
   */
  public Adapter createProjectedCharacteristicListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.ProjectedCharacteristicExpression <em>Projected Characteristic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.ProjectedCharacteristicExpression
   * @generated
   */
  public Adapter createProjectedCharacteristicExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SelectedEntityCharacteristicWildcardReference <em>Selected Entity Characteristic Wildcard Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SelectedEntityCharacteristicWildcardReference
   * @generated
   */
  public Adapter createSelectedEntityCharacteristicWildcardReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.ExplicitSelectedEntityCharacteristicReference <em>Explicit Selected Entity Characteristic Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.ExplicitSelectedEntityCharacteristicReference
   * @generated
   */
  public Adapter createExplicitSelectedEntityCharacteristicReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SelectedEntityExpression <em>Selected Entity Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SelectedEntityExpression
   * @generated
   */
  public Adapter createSelectedEntityExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.FromClause <em>From Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.FromClause
   * @generated
   */
  public Adapter createFromClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EntityExpression <em>Entity Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EntityExpression
   * @generated
   */
  public Adapter createEntityExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SelectedEntity <em>Selected Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SelectedEntity
   * @generated
   */
  public Adapter createSelectedEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EntityJoinExpression <em>Entity Join Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EntityJoinExpression
   * @generated
   */
  public Adapter createEntityJoinExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.JoinEntity <em>Join Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.JoinEntity
   * @generated
   */
  public Adapter createJoinEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EntityJoinCriteria <em>Entity Join Criteria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EntityJoinCriteria
   * @generated
   */
  public Adapter createEntityJoinCriteriaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EntityTypeCharacteristicEquivalenceExpression <em>Entity Type Characteristic Equivalence Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EntityTypeCharacteristicEquivalenceExpression
   * @generated
   */
  public Adapter createEntityTypeCharacteristicEquivalenceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SelectedEntityCharacteristicReference <em>Selected Entity Characteristic Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SelectedEntityCharacteristicReference
   * @generated
   */
  public Adapter createSelectedEntityCharacteristicReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SelectedEntityReference <em>Selected Entity Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SelectedEntityReference
   * @generated
   */
  public Adapter createSelectedEntityReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.WhereClause <em>Where Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.WhereClause
   * @generated
   */
  public Adapter createWhereClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.Criteria <em>Criteria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.Criteria
   * @generated
   */
  public Adapter createCriteriaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.OrderByClause <em>Order By Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.OrderByClause
   * @generated
   */
  public Adapter createOrderByClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.OrderingExpression <em>Ordering Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.OrderingExpression
   * @generated
   */
  public Adapter createOrderingExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.ProjectedCharacteristicReference <em>Projected Characteristic Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.ProjectedCharacteristicReference
   * @generated
   */
  public Adapter createProjectedCharacteristicReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.QualifiedProjectedCharacteristicReference <em>Qualified Projected Characteristic Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.QualifiedProjectedCharacteristicReference
   * @generated
   */
  public Adapter createQualifiedProjectedCharacteristicReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.UnqualifiedProjectedCharacteristicReferenceOrAlias <em>Unqualified Projected Characteristic Reference Or Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.UnqualifiedProjectedCharacteristicReferenceOrAlias
   * @generated
   */
  public Adapter createUnqualifiedProjectedCharacteristicReferenceOrAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.BooleanExpression <em>Boolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.BooleanExpression
   * @generated
   */
  public Adapter createBooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.BooleanTerm <em>Boolean Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.BooleanTerm
   * @generated
   */
  public Adapter createBooleanTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.BooleanFactor <em>Boolean Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.BooleanFactor
   * @generated
   */
  public Adapter createBooleanFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.BooleanPredicate <em>Boolean Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.BooleanPredicate
   * @generated
   */
  public Adapter createBooleanPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.ScalarComparePredicate <em>Scalar Compare Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.ScalarComparePredicate
   * @generated
   */
  public Adapter createScalarComparePredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SetMembershipPredicate <em>Set Membership Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SetMembershipPredicate
   * @generated
   */
  public Adapter createSetMembershipPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.LogicalSet <em>Logical Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.LogicalSet
   * @generated
   */
  public Adapter createLogicalSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.CharacteristicBasisSet <em>Characteristic Basis Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.CharacteristicBasisSet
   * @generated
   */
  public Adapter createCharacteristicBasisSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SetComparePredicate <em>Set Compare Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SetComparePredicate
   * @generated
   */
  public Adapter createSetComparePredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.CompareSet <em>Compare Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.CompareSet
   * @generated
   */
  public Adapter createCompareSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.ExistsPredicate <em>Exists Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.ExistsPredicate
   * @generated
   */
  public Adapter createExistsPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.PredicateTerm <em>Predicate Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.PredicateTerm
   * @generated
   */
  public Adapter createPredicateTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.CharacteristicBasis <em>Characteristic Basis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.CharacteristicBasis
   * @generated
   */
  public Adapter createCharacteristicBasisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.Subquery <em>Subquery</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.Subquery
   * @generated
   */
  public Adapter createSubqueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.CharacteristicReference <em>Characteristic Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.CharacteristicReference
   * @generated
   */
  public Adapter createCharacteristicReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EntityTypeReference <em>Entity Type Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EntityTypeReference
   * @generated
   */
  public Adapter createEntityTypeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EnumLiteralSet <em>Enum Literal Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EnumLiteralSet
   * @generated
   */
  public Adapter createEnumLiteralSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EnumLiteralReferenceExpression <em>Enum Literal Reference Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EnumLiteralReferenceExpression
   * @generated
   */
  public Adapter createEnumLiteralReferenceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EnumerationTypeReference <em>Enumeration Type Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EnumerationTypeReference
   * @generated
   */
  public Adapter createEnumerationTypeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.EnumerationLiteralReference <em>Enumeration Literal Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.EnumerationLiteralReference
   * @generated
   */
  public Adapter createEnumerationLiteralReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.SelectedEntityAlias <em>Selected Entity Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.SelectedEntityAlias
   * @generated
   */
  public Adapter createSelectedEntityAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.ProjectedCharacteristicAlias <em>Projected Characteristic Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.ProjectedCharacteristicAlias
   * @generated
   */
  public Adapter createProjectedCharacteristicAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.epistimis.uddl.query.query.QueryIdentifier <em>Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.epistimis.uddl.query.query.QueryIdentifier
   * @generated
   */
  public Adapter createQueryIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //QueryAdapterFactory
