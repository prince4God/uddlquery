/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.query.query.util;

import com.epistimis.uddl.query.query.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.epistimis.uddl.query.query.QueryPackage
 * @generated
 */
public class QuerySwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QueryPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QuerySwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = QueryPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case QueryPackage.QUERY_SPECIFICATION:
      {
        QuerySpecification querySpecification = (QuerySpecification)theEObject;
        T result = caseQuerySpecification(querySpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.QUERY_STATEMENT:
      {
        QueryStatement queryStatement = (QueryStatement)theEObject;
        T result = caseQueryStatement(queryStatement);
        if (result == null) result = caseQuerySpecification(queryStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.PROJECTED_CHARACTERISTIC_LIST:
      {
        ProjectedCharacteristicList projectedCharacteristicList = (ProjectedCharacteristicList)theEObject;
        T result = caseProjectedCharacteristicList(projectedCharacteristicList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.PROJECTED_CHARACTERISTIC_EXPRESSION:
      {
        ProjectedCharacteristicExpression projectedCharacteristicExpression = (ProjectedCharacteristicExpression)theEObject;
        T result = caseProjectedCharacteristicExpression(projectedCharacteristicExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SELECTED_ENTITY_CHARACTERISTIC_WILDCARD_REFERENCE:
      {
        SelectedEntityCharacteristicWildcardReference selectedEntityCharacteristicWildcardReference = (SelectedEntityCharacteristicWildcardReference)theEObject;
        T result = caseSelectedEntityCharacteristicWildcardReference(selectedEntityCharacteristicWildcardReference);
        if (result == null) result = caseProjectedCharacteristicExpression(selectedEntityCharacteristicWildcardReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE:
      {
        ExplicitSelectedEntityCharacteristicReference explicitSelectedEntityCharacteristicReference = (ExplicitSelectedEntityCharacteristicReference)theEObject;
        T result = caseExplicitSelectedEntityCharacteristicReference(explicitSelectedEntityCharacteristicReference);
        if (result == null) result = caseProjectedCharacteristicExpression(explicitSelectedEntityCharacteristicReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SELECTED_ENTITY_EXPRESSION:
      {
        SelectedEntityExpression selectedEntityExpression = (SelectedEntityExpression)theEObject;
        T result = caseSelectedEntityExpression(selectedEntityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.FROM_CLAUSE:
      {
        FromClause fromClause = (FromClause)theEObject;
        T result = caseFromClause(fromClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENTITY_EXPRESSION:
      {
        EntityExpression entityExpression = (EntityExpression)theEObject;
        T result = caseEntityExpression(entityExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SELECTED_ENTITY:
      {
        SelectedEntity selectedEntity = (SelectedEntity)theEObject;
        T result = caseSelectedEntity(selectedEntity);
        if (result == null) result = caseJoinEntity(selectedEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENTITY_JOIN_EXPRESSION:
      {
        EntityJoinExpression entityJoinExpression = (EntityJoinExpression)theEObject;
        T result = caseEntityJoinExpression(entityJoinExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.JOIN_ENTITY:
      {
        JoinEntity joinEntity = (JoinEntity)theEObject;
        T result = caseJoinEntity(joinEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENTITY_JOIN_CRITERIA:
      {
        EntityJoinCriteria entityJoinCriteria = (EntityJoinCriteria)theEObject;
        T result = caseEntityJoinCriteria(entityJoinCriteria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION:
      {
        EntityTypeCharacteristicEquivalenceExpression entityTypeCharacteristicEquivalenceExpression = (EntityTypeCharacteristicEquivalenceExpression)theEObject;
        T result = caseEntityTypeCharacteristicEquivalenceExpression(entityTypeCharacteristicEquivalenceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SELECTED_ENTITY_CHARACTERISTIC_REFERENCE:
      {
        SelectedEntityCharacteristicReference selectedEntityCharacteristicReference = (SelectedEntityCharacteristicReference)theEObject;
        T result = caseSelectedEntityCharacteristicReference(selectedEntityCharacteristicReference);
        if (result == null) result = caseCharacteristicBasis(selectedEntityCharacteristicReference);
        if (result == null) result = casePredicateTerm(selectedEntityCharacteristicReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SELECTED_ENTITY_REFERENCE:
      {
        SelectedEntityReference selectedEntityReference = (SelectedEntityReference)theEObject;
        T result = caseSelectedEntityReference(selectedEntityReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.WHERE_CLAUSE:
      {
        WhereClause whereClause = (WhereClause)theEObject;
        T result = caseWhereClause(whereClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.CRITERIA:
      {
        Criteria criteria = (Criteria)theEObject;
        T result = caseCriteria(criteria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ORDER_BY_CLAUSE:
      {
        OrderByClause orderByClause = (OrderByClause)theEObject;
        T result = caseOrderByClause(orderByClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ORDERING_EXPRESSION:
      {
        OrderingExpression orderingExpression = (OrderingExpression)theEObject;
        T result = caseOrderingExpression(orderingExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.PROJECTED_CHARACTERISTIC_REFERENCE:
      {
        ProjectedCharacteristicReference projectedCharacteristicReference = (ProjectedCharacteristicReference)theEObject;
        T result = caseProjectedCharacteristicReference(projectedCharacteristicReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.QUALIFIED_PROJECTED_CHARACTERISTIC_REFERENCE:
      {
        QualifiedProjectedCharacteristicReference qualifiedProjectedCharacteristicReference = (QualifiedProjectedCharacteristicReference)theEObject;
        T result = caseQualifiedProjectedCharacteristicReference(qualifiedProjectedCharacteristicReference);
        if (result == null) result = caseProjectedCharacteristicReference(qualifiedProjectedCharacteristicReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.UNQUALIFIED_PROJECTED_CHARACTERISTIC_REFERENCE_OR_ALIAS:
      {
        UnqualifiedProjectedCharacteristicReferenceOrAlias unqualifiedProjectedCharacteristicReferenceOrAlias = (UnqualifiedProjectedCharacteristicReferenceOrAlias)theEObject;
        T result = caseUnqualifiedProjectedCharacteristicReferenceOrAlias(unqualifiedProjectedCharacteristicReferenceOrAlias);
        if (result == null) result = caseProjectedCharacteristicReference(unqualifiedProjectedCharacteristicReferenceOrAlias);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.BOOLEAN_EXPRESSION:
      {
        BooleanExpression booleanExpression = (BooleanExpression)theEObject;
        T result = caseBooleanExpression(booleanExpression);
        if (result == null) result = caseCriteria(booleanExpression);
        if (result == null) result = caseBooleanPredicate(booleanExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.BOOLEAN_TERM:
      {
        BooleanTerm booleanTerm = (BooleanTerm)theEObject;
        T result = caseBooleanTerm(booleanTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.BOOLEAN_FACTOR:
      {
        BooleanFactor booleanFactor = (BooleanFactor)theEObject;
        T result = caseBooleanFactor(booleanFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.BOOLEAN_PREDICATE:
      {
        BooleanPredicate booleanPredicate = (BooleanPredicate)theEObject;
        T result = caseBooleanPredicate(booleanPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SCALAR_COMPARE_PREDICATE:
      {
        ScalarComparePredicate scalarComparePredicate = (ScalarComparePredicate)theEObject;
        T result = caseScalarComparePredicate(scalarComparePredicate);
        if (result == null) result = caseBooleanPredicate(scalarComparePredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SET_MEMBERSHIP_PREDICATE:
      {
        SetMembershipPredicate setMembershipPredicate = (SetMembershipPredicate)theEObject;
        T result = caseSetMembershipPredicate(setMembershipPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.LOGICAL_SET:
      {
        LogicalSet logicalSet = (LogicalSet)theEObject;
        T result = caseLogicalSet(logicalSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.CHARACTERISTIC_BASIS_SET:
      {
        CharacteristicBasisSet characteristicBasisSet = (CharacteristicBasisSet)theEObject;
        T result = caseCharacteristicBasisSet(characteristicBasisSet);
        if (result == null) result = caseLogicalSet(characteristicBasisSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SET_COMPARE_PREDICATE:
      {
        SetComparePredicate setComparePredicate = (SetComparePredicate)theEObject;
        T result = caseSetComparePredicate(setComparePredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.COMPARE_SET:
      {
        CompareSet compareSet = (CompareSet)theEObject;
        T result = caseCompareSet(compareSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.EXISTS_PREDICATE:
      {
        ExistsPredicate existsPredicate = (ExistsPredicate)theEObject;
        T result = caseExistsPredicate(existsPredicate);
        if (result == null) result = caseBooleanPredicate(existsPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.PREDICATE_TERM:
      {
        PredicateTerm predicateTerm = (PredicateTerm)theEObject;
        T result = casePredicateTerm(predicateTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.CHARACTERISTIC_BASIS:
      {
        CharacteristicBasis characteristicBasis = (CharacteristicBasis)theEObject;
        T result = caseCharacteristicBasis(characteristicBasis);
        if (result == null) result = casePredicateTerm(characteristicBasis);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SUBQUERY:
      {
        Subquery subquery = (Subquery)theEObject;
        T result = caseSubquery(subquery);
        if (result == null) result = caseLogicalSet(subquery);
        if (result == null) result = caseCompareSet(subquery);
        if (result == null) result = caseCharacteristicBasis(subquery);
        if (result == null) result = casePredicateTerm(subquery);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.CHARACTERISTIC_REFERENCE:
      {
        CharacteristicReference characteristicReference = (CharacteristicReference)theEObject;
        T result = caseCharacteristicReference(characteristicReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENTITY_TYPE_REFERENCE:
      {
        EntityTypeReference entityTypeReference = (EntityTypeReference)theEObject;
        T result = caseEntityTypeReference(entityTypeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENUM_LITERAL_SET:
      {
        EnumLiteralSet enumLiteralSet = (EnumLiteralSet)theEObject;
        T result = caseEnumLiteralSet(enumLiteralSet);
        if (result == null) result = caseLogicalSet(enumLiteralSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENUM_LITERAL_REFERENCE_EXPRESSION:
      {
        EnumLiteralReferenceExpression enumLiteralReferenceExpression = (EnumLiteralReferenceExpression)theEObject;
        T result = caseEnumLiteralReferenceExpression(enumLiteralReferenceExpression);
        if (result == null) result = casePredicateTerm(enumLiteralReferenceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENUMERATION_TYPE_REFERENCE:
      {
        EnumerationTypeReference enumerationTypeReference = (EnumerationTypeReference)theEObject;
        T result = caseEnumerationTypeReference(enumerationTypeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.ENUMERATION_LITERAL_REFERENCE:
      {
        EnumerationLiteralReference enumerationLiteralReference = (EnumerationLiteralReference)theEObject;
        T result = caseEnumerationLiteralReference(enumerationLiteralReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.SELECTED_ENTITY_ALIAS:
      {
        SelectedEntityAlias selectedEntityAlias = (SelectedEntityAlias)theEObject;
        T result = caseSelectedEntityAlias(selectedEntityAlias);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.PROJECTED_CHARACTERISTIC_ALIAS:
      {
        ProjectedCharacteristicAlias projectedCharacteristicAlias = (ProjectedCharacteristicAlias)theEObject;
        T result = caseProjectedCharacteristicAlias(projectedCharacteristicAlias);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QueryPackage.QUERY_IDENTIFIER:
      {
        QueryIdentifier queryIdentifier = (QueryIdentifier)theEObject;
        T result = caseQueryIdentifier(queryIdentifier);
        if (result == null) result = caseSelectedEntityReference(queryIdentifier);
        if (result == null) result = caseUnqualifiedProjectedCharacteristicReferenceOrAlias(queryIdentifier);
        if (result == null) result = caseCharacteristicReference(queryIdentifier);
        if (result == null) result = caseEntityTypeReference(queryIdentifier);
        if (result == null) result = caseEnumerationTypeReference(queryIdentifier);
        if (result == null) result = caseEnumerationLiteralReference(queryIdentifier);
        if (result == null) result = caseSelectedEntityAlias(queryIdentifier);
        if (result == null) result = caseProjectedCharacteristicAlias(queryIdentifier);
        if (result == null) result = caseProjectedCharacteristicReference(queryIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuerySpecification(QuerySpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQueryStatement(QueryStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Projected Characteristic List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Projected Characteristic List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProjectedCharacteristicList(ProjectedCharacteristicList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Projected Characteristic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Projected Characteristic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProjectedCharacteristicExpression(ProjectedCharacteristicExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selected Entity Characteristic Wildcard Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selected Entity Characteristic Wildcard Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectedEntityCharacteristicWildcardReference(SelectedEntityCharacteristicWildcardReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Explicit Selected Entity Characteristic Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Explicit Selected Entity Characteristic Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExplicitSelectedEntityCharacteristicReference(ExplicitSelectedEntityCharacteristicReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selected Entity Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selected Entity Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectedEntityExpression(SelectedEntityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>From Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>From Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFromClause(FromClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityExpression(EntityExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selected Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selected Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectedEntity(SelectedEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Join Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Join Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityJoinExpression(EntityJoinExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinEntity(JoinEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Join Criteria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Join Criteria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityJoinCriteria(EntityJoinCriteria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Type Characteristic Equivalence Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Type Characteristic Equivalence Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityTypeCharacteristicEquivalenceExpression(EntityTypeCharacteristicEquivalenceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selected Entity Characteristic Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selected Entity Characteristic Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectedEntityCharacteristicReference(SelectedEntityCharacteristicReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selected Entity Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selected Entity Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectedEntityReference(SelectedEntityReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Where Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Where Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhereClause(WhereClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Criteria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Criteria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCriteria(Criteria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Order By Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Order By Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderByClause(OrderByClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordering Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordering Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderingExpression(OrderingExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Projected Characteristic Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Projected Characteristic Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProjectedCharacteristicReference(ProjectedCharacteristicReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qualified Projected Characteristic Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qualified Projected Characteristic Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualifiedProjectedCharacteristicReference(QualifiedProjectedCharacteristicReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unqualified Projected Characteristic Reference Or Alias</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unqualified Projected Characteristic Reference Or Alias</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnqualifiedProjectedCharacteristicReferenceOrAlias(UnqualifiedProjectedCharacteristicReferenceOrAlias object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanExpression(BooleanExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanTerm(BooleanTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanFactor(BooleanFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanPredicate(BooleanPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scalar Compare Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scalar Compare Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScalarComparePredicate(ScalarComparePredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Membership Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Membership Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetMembershipPredicate(SetMembershipPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalSet(LogicalSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Basis Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Basis Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicBasisSet(CharacteristicBasisSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Compare Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Compare Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetComparePredicate(SetComparePredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Compare Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Compare Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompareSet(CompareSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exists Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exists Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistsPredicate(ExistsPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateTerm(PredicateTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Basis</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Basis</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicBasis(CharacteristicBasis object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subquery</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subquery</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubquery(Subquery object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characteristic Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characteristic Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacteristicReference(CharacteristicReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Type Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Type Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityTypeReference(EntityTypeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Literal Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Literal Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumLiteralSet(EnumLiteralSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Literal Reference Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Literal Reference Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumLiteralReferenceExpression(EnumLiteralReferenceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Type Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Type Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationTypeReference(EnumerationTypeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Literal Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Literal Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationLiteralReference(EnumerationLiteralReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selected Entity Alias</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selected Entity Alias</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectedEntityAlias(SelectedEntityAlias object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Projected Characteristic Alias</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Projected Characteristic Alias</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProjectedCharacteristicAlias(ProjectedCharacteristicAlias object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQueryIdentifier(QueryIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //QuerySwitch
