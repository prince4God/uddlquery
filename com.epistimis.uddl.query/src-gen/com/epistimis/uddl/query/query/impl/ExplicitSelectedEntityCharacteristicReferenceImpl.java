/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.query.query.impl;

import com.epistimis.uddl.query.query.ExplicitSelectedEntityCharacteristicReference;
import com.epistimis.uddl.query.query.ProjectedCharacteristicAlias;
import com.epistimis.uddl.query.query.QueryPackage;
import com.epistimis.uddl.query.query.SelectedEntityCharacteristicReference;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Explicit Selected Entity Characteristic Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.uddl.query.query.impl.ExplicitSelectedEntityCharacteristicReferenceImpl#getSelectedEntityCharacteristicReference <em>Selected Entity Characteristic Reference</em>}</li>
 *   <li>{@link com.epistimis.uddl.query.query.impl.ExplicitSelectedEntityCharacteristicReferenceImpl#getProjectedCharacteristicAlias <em>Projected Characteristic Alias</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExplicitSelectedEntityCharacteristicReferenceImpl extends ProjectedCharacteristicExpressionImpl implements ExplicitSelectedEntityCharacteristicReference
{
  /**
   * The cached value of the '{@link #getSelectedEntityCharacteristicReference() <em>Selected Entity Characteristic Reference</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectedEntityCharacteristicReference()
   * @generated
   * @ordered
   */
  protected SelectedEntityCharacteristicReference selectedEntityCharacteristicReference;

  /**
   * The cached value of the '{@link #getProjectedCharacteristicAlias() <em>Projected Characteristic Alias</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectedCharacteristicAlias()
   * @generated
   * @ordered
   */
  protected ProjectedCharacteristicAlias projectedCharacteristicAlias;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExplicitSelectedEntityCharacteristicReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QueryPackage.Literals.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectedEntityCharacteristicReference getSelectedEntityCharacteristicReference()
  {
    return selectedEntityCharacteristicReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectedEntityCharacteristicReference(SelectedEntityCharacteristicReference newSelectedEntityCharacteristicReference, NotificationChain msgs)
  {
    SelectedEntityCharacteristicReference oldSelectedEntityCharacteristicReference = selectedEntityCharacteristicReference;
    selectedEntityCharacteristicReference = newSelectedEntityCharacteristicReference;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE, oldSelectedEntityCharacteristicReference, newSelectedEntityCharacteristicReference);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelectedEntityCharacteristicReference(SelectedEntityCharacteristicReference newSelectedEntityCharacteristicReference)
  {
    if (newSelectedEntityCharacteristicReference != selectedEntityCharacteristicReference)
    {
      NotificationChain msgs = null;
      if (selectedEntityCharacteristicReference != null)
        msgs = ((InternalEObject)selectedEntityCharacteristicReference).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE, null, msgs);
      if (newSelectedEntityCharacteristicReference != null)
        msgs = ((InternalEObject)newSelectedEntityCharacteristicReference).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE, null, msgs);
      msgs = basicSetSelectedEntityCharacteristicReference(newSelectedEntityCharacteristicReference, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE, newSelectedEntityCharacteristicReference, newSelectedEntityCharacteristicReference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProjectedCharacteristicAlias getProjectedCharacteristicAlias()
  {
    return projectedCharacteristicAlias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjectedCharacteristicAlias(ProjectedCharacteristicAlias newProjectedCharacteristicAlias, NotificationChain msgs)
  {
    ProjectedCharacteristicAlias oldProjectedCharacteristicAlias = projectedCharacteristicAlias;
    projectedCharacteristicAlias = newProjectedCharacteristicAlias;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS, oldProjectedCharacteristicAlias, newProjectedCharacteristicAlias);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectedCharacteristicAlias(ProjectedCharacteristicAlias newProjectedCharacteristicAlias)
  {
    if (newProjectedCharacteristicAlias != projectedCharacteristicAlias)
    {
      NotificationChain msgs = null;
      if (projectedCharacteristicAlias != null)
        msgs = ((InternalEObject)projectedCharacteristicAlias).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS, null, msgs);
      if (newProjectedCharacteristicAlias != null)
        msgs = ((InternalEObject)newProjectedCharacteristicAlias).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS, null, msgs);
      msgs = basicSetProjectedCharacteristicAlias(newProjectedCharacteristicAlias, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS, newProjectedCharacteristicAlias, newProjectedCharacteristicAlias));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE:
        return basicSetSelectedEntityCharacteristicReference(null, msgs);
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS:
        return basicSetProjectedCharacteristicAlias(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE:
        return getSelectedEntityCharacteristicReference();
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS:
        return getProjectedCharacteristicAlias();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE:
        setSelectedEntityCharacteristicReference((SelectedEntityCharacteristicReference)newValue);
        return;
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS:
        setProjectedCharacteristicAlias((ProjectedCharacteristicAlias)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE:
        setSelectedEntityCharacteristicReference((SelectedEntityCharacteristicReference)null);
        return;
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS:
        setProjectedCharacteristicAlias((ProjectedCharacteristicAlias)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__SELECTED_ENTITY_CHARACTERISTIC_REFERENCE:
        return selectedEntityCharacteristicReference != null;
      case QueryPackage.EXPLICIT_SELECTED_ENTITY_CHARACTERISTIC_REFERENCE__PROJECTED_CHARACTERISTIC_ALIAS:
        return projectedCharacteristicAlias != null;
    }
    return super.eIsSet(featureID);
  }

} //ExplicitSelectedEntityCharacteristicReferenceImpl
