/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.query.query.impl;

import com.epistimis.uddl.query.query.OrderingExpression;
import com.epistimis.uddl.query.query.ProjectedCharacteristicReference;
import com.epistimis.uddl.query.query.QueryPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ordering Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.uddl.query.query.impl.OrderingExpressionImpl#getCharacteristic <em>Characteristic</em>}</li>
 *   <li>{@link com.epistimis.uddl.query.query.impl.OrderingExpressionImpl#getOrderingType <em>Ordering Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OrderingExpressionImpl extends MinimalEObjectImpl.Container implements OrderingExpression
{
  /**
   * The cached value of the '{@link #getCharacteristic() <em>Characteristic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCharacteristic()
   * @generated
   * @ordered
   */
  protected ProjectedCharacteristicReference characteristic;

  /**
   * The default value of the '{@link #getOrderingType() <em>Ordering Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrderingType()
   * @generated
   * @ordered
   */
  protected static final String ORDERING_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOrderingType() <em>Ordering Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrderingType()
   * @generated
   * @ordered
   */
  protected String orderingType = ORDERING_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OrderingExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QueryPackage.Literals.ORDERING_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProjectedCharacteristicReference getCharacteristic()
  {
    return characteristic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCharacteristic(ProjectedCharacteristicReference newCharacteristic, NotificationChain msgs)
  {
    ProjectedCharacteristicReference oldCharacteristic = characteristic;
    characteristic = newCharacteristic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC, oldCharacteristic, newCharacteristic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCharacteristic(ProjectedCharacteristicReference newCharacteristic)
  {
    if (newCharacteristic != characteristic)
    {
      NotificationChain msgs = null;
      if (characteristic != null)
        msgs = ((InternalEObject)characteristic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC, null, msgs);
      if (newCharacteristic != null)
        msgs = ((InternalEObject)newCharacteristic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC, null, msgs);
      msgs = basicSetCharacteristic(newCharacteristic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC, newCharacteristic, newCharacteristic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOrderingType()
  {
    return orderingType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrderingType(String newOrderingType)
  {
    String oldOrderingType = orderingType;
    orderingType = newOrderingType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.ORDERING_EXPRESSION__ORDERING_TYPE, oldOrderingType, orderingType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC:
        return basicSetCharacteristic(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC:
        return getCharacteristic();
      case QueryPackage.ORDERING_EXPRESSION__ORDERING_TYPE:
        return getOrderingType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC:
        setCharacteristic((ProjectedCharacteristicReference)newValue);
        return;
      case QueryPackage.ORDERING_EXPRESSION__ORDERING_TYPE:
        setOrderingType((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC:
        setCharacteristic((ProjectedCharacteristicReference)null);
        return;
      case QueryPackage.ORDERING_EXPRESSION__ORDERING_TYPE:
        setOrderingType(ORDERING_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.ORDERING_EXPRESSION__CHARACTERISTIC:
        return characteristic != null;
      case QueryPackage.ORDERING_EXPRESSION__ORDERING_TYPE:
        return ORDERING_TYPE_EDEFAULT == null ? orderingType != null : !ORDERING_TYPE_EDEFAULT.equals(orderingType);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (orderingType: ");
    result.append(orderingType);
    result.append(')');
    return result.toString();
  }

} //OrderingExpressionImpl
