/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.query.query.impl;

import com.epistimis.uddl.query.query.ProjectedCharacteristicList;
import com.epistimis.uddl.query.query.QueryPackage;
import com.epistimis.uddl.query.query.QueryStatement;
import com.epistimis.uddl.query.query.SelectedEntityExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.uddl.query.query.impl.QueryStatementImpl#getQualifier <em>Qualifier</em>}</li>
 *   <li>{@link com.epistimis.uddl.query.query.impl.QueryStatementImpl#getProjectedCharacteristicList <em>Projected Characteristic List</em>}</li>
 *   <li>{@link com.epistimis.uddl.query.query.impl.QueryStatementImpl#getSelectedEntityExpression <em>Selected Entity Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QueryStatementImpl extends QuerySpecificationImpl implements QueryStatement
{
  /**
   * The default value of the '{@link #getQualifier() <em>Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualifier()
   * @generated
   * @ordered
   */
  protected static final String QUALIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getQualifier() <em>Qualifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualifier()
   * @generated
   * @ordered
   */
  protected String qualifier = QUALIFIER_EDEFAULT;

  /**
   * The cached value of the '{@link #getProjectedCharacteristicList() <em>Projected Characteristic List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectedCharacteristicList()
   * @generated
   * @ordered
   */
  protected ProjectedCharacteristicList projectedCharacteristicList;

  /**
   * The cached value of the '{@link #getSelectedEntityExpression() <em>Selected Entity Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectedEntityExpression()
   * @generated
   * @ordered
   */
  protected SelectedEntityExpression selectedEntityExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QueryPackage.Literals.QUERY_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getQualifier()
  {
    return qualifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQualifier(String newQualifier)
  {
    String oldQualifier = qualifier;
    qualifier = newQualifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.QUERY_STATEMENT__QUALIFIER, oldQualifier, qualifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProjectedCharacteristicList getProjectedCharacteristicList()
  {
    return projectedCharacteristicList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProjectedCharacteristicList(ProjectedCharacteristicList newProjectedCharacteristicList, NotificationChain msgs)
  {
    ProjectedCharacteristicList oldProjectedCharacteristicList = projectedCharacteristicList;
    projectedCharacteristicList = newProjectedCharacteristicList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST, oldProjectedCharacteristicList, newProjectedCharacteristicList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectedCharacteristicList(ProjectedCharacteristicList newProjectedCharacteristicList)
  {
    if (newProjectedCharacteristicList != projectedCharacteristicList)
    {
      NotificationChain msgs = null;
      if (projectedCharacteristicList != null)
        msgs = ((InternalEObject)projectedCharacteristicList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST, null, msgs);
      if (newProjectedCharacteristicList != null)
        msgs = ((InternalEObject)newProjectedCharacteristicList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST, null, msgs);
      msgs = basicSetProjectedCharacteristicList(newProjectedCharacteristicList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST, newProjectedCharacteristicList, newProjectedCharacteristicList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectedEntityExpression getSelectedEntityExpression()
  {
    return selectedEntityExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectedEntityExpression(SelectedEntityExpression newSelectedEntityExpression, NotificationChain msgs)
  {
    SelectedEntityExpression oldSelectedEntityExpression = selectedEntityExpression;
    selectedEntityExpression = newSelectedEntityExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION, oldSelectedEntityExpression, newSelectedEntityExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelectedEntityExpression(SelectedEntityExpression newSelectedEntityExpression)
  {
    if (newSelectedEntityExpression != selectedEntityExpression)
    {
      NotificationChain msgs = null;
      if (selectedEntityExpression != null)
        msgs = ((InternalEObject)selectedEntityExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION, null, msgs);
      if (newSelectedEntityExpression != null)
        msgs = ((InternalEObject)newSelectedEntityExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION, null, msgs);
      msgs = basicSetSelectedEntityExpression(newSelectedEntityExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION, newSelectedEntityExpression, newSelectedEntityExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST:
        return basicSetProjectedCharacteristicList(null, msgs);
      case QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION:
        return basicSetSelectedEntityExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QueryPackage.QUERY_STATEMENT__QUALIFIER:
        return getQualifier();
      case QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST:
        return getProjectedCharacteristicList();
      case QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION:
        return getSelectedEntityExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QueryPackage.QUERY_STATEMENT__QUALIFIER:
        setQualifier((String)newValue);
        return;
      case QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST:
        setProjectedCharacteristicList((ProjectedCharacteristicList)newValue);
        return;
      case QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION:
        setSelectedEntityExpression((SelectedEntityExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.QUERY_STATEMENT__QUALIFIER:
        setQualifier(QUALIFIER_EDEFAULT);
        return;
      case QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST:
        setProjectedCharacteristicList((ProjectedCharacteristicList)null);
        return;
      case QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION:
        setSelectedEntityExpression((SelectedEntityExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.QUERY_STATEMENT__QUALIFIER:
        return QUALIFIER_EDEFAULT == null ? qualifier != null : !QUALIFIER_EDEFAULT.equals(qualifier);
      case QueryPackage.QUERY_STATEMENT__PROJECTED_CHARACTERISTIC_LIST:
        return projectedCharacteristicList != null;
      case QueryPackage.QUERY_STATEMENT__SELECTED_ENTITY_EXPRESSION:
        return selectedEntityExpression != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (qualifier: ");
    result.append(qualifier);
    result.append(')');
    return result.toString();
  }

} //QueryStatementImpl
