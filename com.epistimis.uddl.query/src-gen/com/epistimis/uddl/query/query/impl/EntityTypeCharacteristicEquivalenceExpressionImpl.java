/**
 * generated by Xtext 2.32.0
 * Copyright (c) 2022, 2023 Epistimis LLC (http://www.epistimis.com).
 */
package com.epistimis.uddl.query.query.impl;

import com.epistimis.uddl.query.query.EntityTypeCharacteristicEquivalenceExpression;
import com.epistimis.uddl.query.query.QueryPackage;
import com.epistimis.uddl.query.query.SelectedEntityCharacteristicReference;
import com.epistimis.uddl.query.query.SelectedEntityReference;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity Type Characteristic Equivalence Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.epistimis.uddl.query.query.impl.EntityTypeCharacteristicEquivalenceExpressionImpl#getSecr <em>Secr</em>}</li>
 *   <li>{@link com.epistimis.uddl.query.query.impl.EntityTypeCharacteristicEquivalenceExpressionImpl#getSelectedEntity <em>Selected Entity</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityTypeCharacteristicEquivalenceExpressionImpl extends MinimalEObjectImpl.Container implements EntityTypeCharacteristicEquivalenceExpression
{
  /**
   * The cached value of the '{@link #getSecr() <em>Secr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecr()
   * @generated
   * @ordered
   */
  protected SelectedEntityCharacteristicReference secr;

  /**
   * The cached value of the '{@link #getSelectedEntity() <em>Selected Entity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectedEntity()
   * @generated
   * @ordered
   */
  protected SelectedEntityReference selectedEntity;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityTypeCharacteristicEquivalenceExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QueryPackage.Literals.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectedEntityCharacteristicReference getSecr()
  {
    return secr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSecr(SelectedEntityCharacteristicReference newSecr, NotificationChain msgs)
  {
    SelectedEntityCharacteristicReference oldSecr = secr;
    secr = newSecr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR, oldSecr, newSecr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSecr(SelectedEntityCharacteristicReference newSecr)
  {
    if (newSecr != secr)
    {
      NotificationChain msgs = null;
      if (secr != null)
        msgs = ((InternalEObject)secr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR, null, msgs);
      if (newSecr != null)
        msgs = ((InternalEObject)newSecr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR, null, msgs);
      msgs = basicSetSecr(newSecr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR, newSecr, newSecr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectedEntityReference getSelectedEntity()
  {
    return selectedEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectedEntity(SelectedEntityReference newSelectedEntity, NotificationChain msgs)
  {
    SelectedEntityReference oldSelectedEntity = selectedEntity;
    selectedEntity = newSelectedEntity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY, oldSelectedEntity, newSelectedEntity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelectedEntity(SelectedEntityReference newSelectedEntity)
  {
    if (newSelectedEntity != selectedEntity)
    {
      NotificationChain msgs = null;
      if (selectedEntity != null)
        msgs = ((InternalEObject)selectedEntity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY, null, msgs);
      if (newSelectedEntity != null)
        msgs = ((InternalEObject)newSelectedEntity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY, null, msgs);
      msgs = basicSetSelectedEntity(newSelectedEntity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY, newSelectedEntity, newSelectedEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR:
        return basicSetSecr(null, msgs);
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY:
        return basicSetSelectedEntity(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR:
        return getSecr();
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY:
        return getSelectedEntity();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR:
        setSecr((SelectedEntityCharacteristicReference)newValue);
        return;
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY:
        setSelectedEntity((SelectedEntityReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR:
        setSecr((SelectedEntityCharacteristicReference)null);
        return;
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY:
        setSelectedEntity((SelectedEntityReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SECR:
        return secr != null;
      case QueryPackage.ENTITY_TYPE_CHARACTERISTIC_EQUIVALENCE_EXPRESSION__SELECTED_ENTITY:
        return selectedEntity != null;
    }
    return super.eIsSet(featureID);
  }

} //EntityTypeCharacteristicEquivalenceExpressionImpl
