/**
 * generated by Xtext 2.32.0
 */
package com.epistimis.uddl.query.formatting2;

import com.epistimis.uddl.query.query.ProjectedCharacteristicExpression;
import com.epistimis.uddl.query.query.ProjectedCharacteristicList;
import com.epistimis.uddl.query.query.QueryStatement;
import com.epistimis.uddl.query.query.SelectedEntityExpression;
import com.epistimis.uddl.query.services.QueryGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class QueryFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private QueryGrammarAccess _queryGrammarAccess;

  protected void _format(final QueryStatement queryStatement, @Extension final IFormattableDocument document) {
    document.<ProjectedCharacteristicList>format(queryStatement.getProjectedCharacteristicList());
    document.<SelectedEntityExpression>format(queryStatement.getSelectedEntityExpression());
  }

  protected void _format(final ProjectedCharacteristicList projectedCharacteristicList, @Extension final IFormattableDocument document) {
    EList<ProjectedCharacteristicExpression> _characteristic = projectedCharacteristicList.getCharacteristic();
    for (final ProjectedCharacteristicExpression projectedCharacteristicExpression : _characteristic) {
      document.<ProjectedCharacteristicExpression>format(projectedCharacteristicExpression);
    }
  }

  public void format(final Object queryStatement, final IFormattableDocument document) {
    if (queryStatement instanceof XtextResource) {
      _format((XtextResource)queryStatement, document);
      return;
    } else if (queryStatement instanceof QueryStatement) {
      _format((QueryStatement)queryStatement, document);
      return;
    } else if (queryStatement instanceof ProjectedCharacteristicList) {
      _format((ProjectedCharacteristicList)queryStatement, document);
      return;
    } else if (queryStatement instanceof EObject) {
      _format((EObject)queryStatement, document);
      return;
    } else if (queryStatement == null) {
      _format((Void)null, document);
      return;
    } else if (queryStatement != null) {
      _format(queryStatement, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(queryStatement, document).toString());
    }
  }
}
